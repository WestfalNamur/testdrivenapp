AJAX

	Asynchronous JavaScript + XML; JSON is primarily used for requests;
	HTML + CSS + JS + DOM + XML and XMLHttpRequest-object;
	Combination of theses tools allows quick and incremental updates to an app
	without reloading the entire browser page; "Asynchronous XMLHttpRequest";
	

AWS

	AWS Security Group
		Virtual firewall to control traffic to and from instance;
	
	IAM user
		 Identity and Access Management;
		 Part of a group with defined permissions;
		 Has access-key and secret-key 
		 via terminal or (~/.aws/credentials/credentials.csv)

Bash
	
	eval [arg ...]
    The  args  are read and concatenated together into a single command. This
    command is then read and executed by the shell, and its  exit status is
    returned as the value of eval.  If there are no args, or only null
    arguments, eval returns 0;
	i.e. eval $(docker-machine env testdriven-prod);

Cypress
	
	./node_modules/.bin/cypress open --config baseUrl=http://localhost
	leverages jQuery’s selector engine; asynchronous; commands return promises;
	DOM elements wraped in retry-and-timeout logig; "queue of commands";  

Docker

	Docker
		Docker Engine (Client-server application made up of the Docker daemon)
		+ REST API that specifies interfaces for interacting with the daemon;

	Docker Engine
		Usually referred to as "Docker";
		Client-server application made up of the Docker daemon;

	Docker Compose
		Tool for defining and running multi-container Docker applications;
		Use a YAML file to configure your application’s services;
		1. Define app-env with a Dockerfile;
		2. Define services with docker-compose.yml so they can be run together in
		   an isolated environment;
		3. "docker-compose up" to run app
		"docker-compose build" build image from Dockerfile;
		"docker-compose up -d --build" fires up container;
		"docker-compose logs";
		"docker-compose exec users python manage.py test" executes commands
		 	defined in manage.py;
	 
	Docker Machine
		Tool that lets you install Docker Engine on virtual hosts;
		"docker-machine env <HOSTNAME>" to point at host <HOSTNAME>
		example create:
			docker-machine create \
			--amazonec2-access-key AKIXXXXXXX \
			--amazonec2-secret-key XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX \
			--driver amazonec2 --amazonec2-region eu-central-1 \
			--amazonec2-instance-type "t2.micro" \
			docker-egine-name
		point to engine:
			"docker-machine env docker-egine-name" set active host
			"eval $(docker-machine env testdriven-prod)"
			Selection indicated by *
		"docker-machine ls --timeout "120"" # timeout extended in case of slow
			connection.
		docker-machine --debug regenerate-certs -f default;

	Docker Image
		Created by sequence of commands written in a file called as Dockerfile;
		An image is a compressed, self-contained piece of software which has to be
		unwrapped in order to use the functionality;

Enviroment

	export export REACT_APP_USERS_SERVICE_URL=http://localhost

Flask
	
	Blueprint
		A blueprint defines a collection of views, templates, static files and
		other elements that can be applied to an application;

	Migrate
		"...handles SQLAlchemy database migrations for Flask applications using
		Alembic." 

	request
		Data from client gets sent to server as global request object;
		flask.request lets you process this pbject;

	render_template
		Flask functionality to render a template;

Gunicorn

	Python WSGI HTTP Server for UNIX; Interacts with nginx and actual python
	web-app code to serve dynamical content;
	Pre-fork worker model:
		Master creates forks which handle each request; A fork is a completely
		separate *nix process; "pre-fork" means that these processes are forked
		before a request comes in;
	Gevent:
		workers-threads are asynchronous;

Hash-based routing

	...changes in the hash don’t trigger page reload;
	.com/#/something/list => #/something/list does not get sent to the server;

JWT

	JSON Web Tokens 

Nginx

	Web-server,reverse proxy, HTTP cache, and load balancer; 
	# for serving static content;
	Low memory; High concurrency; Asynchronous event-driven; Requests are
	handled in a single thread; Master porcess controls multiple worker
	processes; 

Race Condition
	Behavior of a system is dependent on the sequence or timing of other
	uncontrollable events; React solves this via Lifecycle Methodes;

React
	Component Lifecycle Methodes
	Testing:
		Jest
			JavaScript Testing Framework;
			Snapshot Testing tests UI component against an older snapshot of it
			that is stored alongside the test;
		Enzyme
			Component testing library; Tests component output;
			shallow(<Component />) allows isolated testing of components;
			mount(<Component />) testing within whole lifecycle. For components
			that may interact with the DOM api. Full DOM renderig;

Token-based-Authentification
	
	Credentials to servers; Server returns token; Every server-call includes the token;
	Pro. Stateless and Single Sign On; Cons: Cross-site Scripting if not stored as Cooky;